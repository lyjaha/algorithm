package com.ly.nk.list;

/**
 * BM4 合并两个排序的链表  LC.21
 *
 * 描述：
 * 输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的节点仍然是递增排序的。
 * 数据范围：0 ≤ n ≤ 1000，−1000 ≤ 节点值 ≤ 1000
 *
 * 要求 空间复杂度 O(1)，时间复杂度 O(n)
 *
 * 如输入{1,3,5},{2,4,6}时，合并后的链表为{1,2,3,4,5,6}
 * 或输入{-1,2,4},{1,3,4}时，合并后的链表为{-1,1,2,3,4,4}，所以对应的输出为{-1,1,2,3,4,4}
 *
 *
 * 举一反三：
 * 学习完本题的思路你可以解决如下题目：
 * JZ23.链表中环的入口节点
 * JZ22.链表中倒数最后k个节点
 * JZ52.两个链表的第一个公共节点
 */
public class MergeTwoList {

    public class ListNode {
        int val;
        ListNode next = null;
        public ListNode(int val) {
            this.val = val;
        }
    }


    /**
     * 方法1：递归
     *
     * 步骤：
     * 在递归的最基本情况下，如果其中一个链表为空，直接返回另一个链表的剩余部分，作为当前链表的后续链表。
     * 如果l1当前节点的值小于l2当前节点的值，则将l1作为当前合并链表的当前节点，将l1的下一个节点指向l1子问题和l2的结果的合并。
     * 注意：这里是将l1的下一个节点指向递归的结果，而不是将l1自身指向递归结果。这是因为在递归过程中返回的是子问题合并后的结果，
     * 而不是子问题中的某个节点。
     * 如果l1当前节点的值大于等于l2当前节点的值，同理将l2作为当前合并链表的节点，并将l2的下一个节点指向l1和l2子问题的结果的合。
     * 返回当前合并链表的头节点。
     *
     * step 1：每次比较两个链表当前节点的值，然后取较小值的链表指针往后，另一个不变，两段子链表作为新的链表送入递归中。
     * step 2：递归回来的结果我们要加在当前较小值的节点后面，相当于不断在较小值后面添加节点。
     * step 3：递归的终止是两个链表有一个为空。
     *
     * 时间复杂度：O(n+m)，其中 n 和 m 分别为两个链表的长度，最坏情况遍历两个链表共 2n 个节点
     * 空间复杂度：O(n+m)，其中 n 和 m 分别为两个链表的长度，递归栈深度最大为两个链表的长度和 2n
     *
     * @param l1
     * @param l2
     * @return
     */
    public ListNode mergeTwoLists (ListNode l1, ListNode l2) {

        // 如果有一个链表为空，则返回另一个链表的剩余部分
        if (l1 == null || l2 == null) {
            return l1 != null ? l1 : l2;
        }
        // 如果l1当前节点的值小于l2当前节点的值
        if (l1.val < l2.val) {
            //递归往下
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        } else {
            //递归往下
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }

    /**
     * 方法2：双指针迭代
     * 知识点：双指针
     *
     * 思路：
     * 1.已知两个链表是从小到大的顺序，且链表是已经排好序，可以使用归并排序的思想，每次比较2个头部，从中取出最小的元素，
     * 然后依次往后，因此需要2个同方向指针
     *
     * 步骤：
     * step 1：判断空链表的情况，只要有一个链表为空，那答案必定就是另一个链表了，就算另一个链表也为空。
     * step 2：新建一个空的表头后面连接两个链表排序后的节点，两个指针分别指向两链表头。
     * step 3：遍历两个链表都不为空的情况，取较小值添加在新的链表后面，每次只把被添加的链表的指针后移。
     * step 4：遍历到最后肯定有一个链表还有剩余的节点，它们的值将大于前面所有的，直接连在新的链表后面即可。
     *
     * 时空复杂度：
     * 时间复杂度：O(n+m)，其中 n 和 m 分别为两个链表的长度，最坏情况遍历两个链表共 2∗n 个节点
     * 空间复杂度：O(1)，无额外辅助空间使用，返回链表使用的是原有节点组装，未开辟空间
     *
     * @param l1
     * @param l2
     * @return
     */
    public ListNode mergeTwoLists2 (ListNode l1, ListNode l2) {

        // 带头节点的链表
        ListNode preHead = new ListNode(-1);
        // prev 节点指向头结点
        ListNode prev = preHead;
        // 遍历2个链表且都不是空
        while (l1 != null && l2 != null) {
            // 如果l1当前节点的元素值小于等于l2当前节点的元素值，取较小的值
            if (l1.val <= l2.val) {
                // 将prev节点的下一个节点指向l1当前节点
                prev.next = l1;
                // l1指针后移一位，只移动取值的指针
                l1 = l1.next;
            } else {
                // 将prev节点的下一个节点指向l2当前节点
                prev.next = l2;
                // l2指针后移一位，只移动取值的指针
                l2 = l2.next;
            }
            // prev指针也要后移一位
            prev = prev.next;
        }
        // 由于l1和l2长度不一定相等，如果有一个链表遍历完了，则将prev节点的next指向另一个链表的剩余部分
        prev.next = l1 != null ? l1 : l2;
        // 返回带头节点的链表的下一个节点，即为合并后的链表的头结点,返回值去掉表头
        return preHead.next;
    }


}
