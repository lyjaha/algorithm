package com.ly.nk.lookup;

/**
 *  BM22 比较版本号
 *
 * 描述：
 * 牛客项目发布项目版本时会有版本号，比如1.02.11，2.14.4等等
 * 现在给你2个版本号version1和version2，请你比较他们的大小
 * 版本号是由修订号组成，修订号与修订号之间由一个"."连接。1个修订号可能有多位数字组成，修订号可能包含前导0，且是合法的。
 * 例如，1.02.11，0.1，0.2都是合法的版本号，每个版本号至少包含1个修订号。
 * 修订号从左到右编号，下标从0开始，最左边的修订号下标为0，下一个修订号下标为1，以此类推。
 *
 * 比较规则：
 * 一. 比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较忽略任何前导零后的整数值。
 * 比如"0.1"和"0.01"的版本号是相等的
 * 二. 如果版本号没有指定某个下标处的修订号，则该修订号视为0。例如，"1.1"的版本号小于"1.1.1"。
 * 因为"1.1"的版本号相当于"1.1.0"，第3位修订号的下标为0，小于1
 * 三.  version1 > version2 返回1，如果 version1 < version2 返回-1，不然返回0.
 *
 * 数据范围：
 * 1<=version1.length,version2.length<=1000
 * version1 和 version2 的修订号不会超过int的表达范围，即不超过 32 位整数 的范围
 *
 * 进阶：
 * 空间复杂度O(1) ，时间复杂度 O(n)
 *
 * 示例
 * 输入："1.1","2.1"
 * 返回值：-1
 * 说明：version1 中下标为 0 的修订号是 "1"，version2 中下标为 0 的修订号是 "2" 。1 < 2，
 * 所以 version1 < version2，返回-1
 *
 * 输入："1.1","1.01"
 * 返回值：0
 * 说明：version2忽略前导0，为"1.1"，和version相同，返回0
 *
 * 输入："1.1","1.1.1"
 * 返回值：-1
 * 说明："1.1"的版本号小于"1.1.1"。因为"1.1"的版本号相当于"1.1.0"，第3位修订号的下标为0，小于1，
 * 所以version1 < version2，返回-1
 *
 * 输入："2.0.1","2"
 * 返回值：1
 * 说明：version1的下标2>version2的下标2，返回1
 *
 */
public class CompareVersion {

    /**
     * 方法1：双指针遍历截取
     *
     * 思路：
     *
     * 步骤：
     *  1：利用两个指针表示字符串的下标，分别遍历两个字符串。
     *  2：每次截取点之前的数字字符组成数字，即在遇到一个点之前，直接取数字，加在前面数字乘10的后面。
     *  （因为int会溢出，这里采用long记录数字）
     *  3：然后比较两个数字大小，根据大小关系返回1或者-1，如果全部比较完都无法比较出大小关系，则返回0.
     *
     * 时空复杂度：
     * 时间复杂度：O(max(n,m))，其中m和n分别为两个字符串的长度，遍历两个字符串，复杂度选取较高值
     * 空间复杂度：O(1)，常数级变量，无额外辅助空间
     *
     *
     * @param version1
     * @param version2
     * @return
     */
    public int compare (String version1, String version2) {
        int n1 = version1.length();
        int n2 = version2.length();

        int i = 0, j = 0;

        //直到某个字符串结束
        while (i < n1 || j < n2) {
            long num1 = 0;
            //从下一个点前截取数字
            while(i < n1 && version1.charAt(i) != '.'){
                num1 = num1 * 10 + (version1.charAt(i) - '0');
                i++;
            }
            //跳过点
            i++;

            long num2 = 0;
            //从下一个点前截取数字
            while(j < n2 && version2.charAt(j) != '.'){
                num2 = num2 * 10 + (version2.charAt(j) - '0');
                j++;
            }
            //跳过点
            j++;

            //比较数字大小
            if(num1 > num2)
                return 1;
            if(num1 < num2)
                return -1;
        }
        //版本号相同
        return 0;
    }

}
