package com.ly.nk.lookup;

/**
 *  BM18 二维数组中的查找
 *
 *  描述：
 *  在一个二维数组array中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
 *  请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
 *  [
 *  [1,2,8,9],
 *  [2,4,9,12],
 *  [4,7,10,13],
 *  [6,8,11,15]
 *  ]
 * 给定 target = 7，返回 true。
 * 给定 target = 3，返回 false。
 *
 * 数据范围：矩阵的长宽满足 0≤n, m≤500 ， 矩阵中的值满足 0≤val≤10的9次方
 * 进阶：空间复杂度O(1) ，时间复杂度 O(n+m)
 *
 * 示例
 * 输入：7,[[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]]
 * 返回值：true
 * 说明：存在7，返回true
 *
 * 输入：1,[[2]]
 * 返回值：false
 *
 */
public class FindTwoArray {

    /**
     * 方法1：二分查找
     *
     * 知识点：分治
     *
     * 思路：
     *
     * 步骤：
     *  1：首先获取矩阵的两个边长，判断特殊情况。
     *  2：首先以左下角为起点，若是它小于目标元素，则往右移动去找大的，若是他大于目标元素，则往上移动去找小的。
     *  3：若是移动到了矩阵边界也没找到，说明矩阵中不存在目标值。
     *
     * 时空复杂度：
     * 时间复杂度：O(m+n)，遍历矩阵的时候，最多经过矩阵的一行一列
     * 空间复杂度：O(1)，常数级变量，无额外辅助空间
     *
     * @param target
     * @param array
     * @return
     */
    public boolean Find (int target, int[][] array) {
        //优先判断特殊情况
        int n = array.length;
        if (n == 0) {
            return false;
        }
        int m = array[0].length;
        if (m == 0) {
            return false;
        }
        //从最左下角的元素开始往左或往上
        for (int i = n - 1,j = 0; i >= 0 && j < m; ) {
            //元素较大，往上走
            if (array[i][j] > target) {
                i--;
            //元素较小，往右走
            }else if (array[i][j] < target) {
                j++;
            } else {
                return true;
            }
        }
        return false;
    }
}
